#!/usr/bin/env python2

from binascii import unhexlify
from argparse import ArgumentParser
from subprocess import Popen, PIPE
import sys, os


def mul_inv(e,phi):
    d = 0
    x1 = 0
    x2 = 0
    y1 = 1
    t_phi = phi

    while e > 0:
        tmp1 = t_phi//e
        tmp2 = t_phi - tmp1 * e
        t_phi = e

        e = tmp2
        x = x2 - tmp1 * 1
        y = d - tmp1 * y1

        x2 = x1
        x1 = x 
        d = y1
        y1 = y

    if t_phi == 1:
        return d+phi


def gcd(x, y):
    while y > 0:
        x, y = y, x % y
    return x


def lcm(x,y):
    return x*y // gcd(x,y)


def decrypt(c, p, q, e):
    n = p*q
    lmbd = lcm(p-1,q-1)
    d = mul_inv(e,lcm(p-1,q-1))

    m = pow(c,d,n)
    return m


def decrypt_str(c, p, q, e):
    m = hex(decrypt(c, p, q, e))
    return unhexlify(m[2:-1])


def sieve(n):
    p = Popen(['./factor', str(n)], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()
    return ( int(x) for x in output.split() )


def test():

    n = 48789828618640905340268650455641742611513932500406667
    p,q = (176795785843333659350390219, 275967146987743635463977793)

    e = 65537
    c = 35527844866852571287965978399657369491580791928209728

    print decrypt_str(c, p, q, e)


if __name__ == "__main__":
    
    parser = ArgumentParser()
    parser.add_argument("-n", type=int)
    parser.add_argument("-p", type=int)
    parser.add_argument("-q", type=int)
    parser.add_argument("-e", type=int, required=True)
    parser.add_argument("-c", type=int, required=True)

    args = parser.parse_args()

    p = args.p
    q = args.q

    if args.n:
        p,q = sieve(args.n)
    elif not args.p and args.q:
        parser.print_help()
        sys.exit(1)
   
    print hex(decrypt(args.c, p, q, args.e))
