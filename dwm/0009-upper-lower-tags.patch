From 70227649e863615b781a458538ac0d04778721e7 Mon Sep 17 00:00:00 2001
From: Spencer Powell <krornus@gmail.com>
Date: Fri, 16 Sep 2022 14:38:08 -0600
Subject: [PATCH 09/10] upper/lower tags

---
 config.def.h |  61 ++++++++-------
 dwm.c        | 216 +++++++++++++++++++++++++++++++++++++--------------
 2 files changed, 187 insertions(+), 90 deletions(-)

diff --git a/config.def.h b/config.def.h
index 6c0c5f2..46b9efd 100644
--- a/config.def.h
+++ b/config.def.h
@@ -19,7 +19,8 @@ static const char *colors[][3]      = {
 };
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const char *uppertags[] = { "a", "s", "d", "f", };
+static const char *lowertags[] = { "z", "x", "c", "v", };
 
 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
@@ -36,11 +37,11 @@ static const Layout layouts[] = {
 
 /* key definitions */
 #define MODKEY Mod4Mask
-#define TAGKEYS(KEY,TAG) \
-	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
-	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
-	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
-	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+#define TAGKEYS(ROW,KEY,TAG) \
+	{ MODKEY,                       KEY,      ROW ## view,           {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask,           KEY,      ROW ## toggleview,     {.ui = 1 << TAG} }, \
+	{ MODKEY|ShiftMask,             KEY,      ROW ## tag,            {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask|ShiftMask, KEY,      ROW ## toggletag,      {.ui = 1 << TAG} },
 
 /* commands */
 static const char *roficmd[] = { "rofi", "-show", "run", "-matching", "fuzzy", "-theme", "Monokai", NULL };
@@ -77,37 +78,37 @@ static const Key keys[] = {
 	{ MODKEY,                       XK_y,      setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[2]} },
 	{ MODKEY,                       XK_space,  nextlayout,     {0} },
-	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
-	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
 	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
-	TAGKEYS(                        XK_1,                      0)
-	TAGKEYS(                        XK_2,                      1)
-	TAGKEYS(                        XK_3,                      2)
-	TAGKEYS(                        XK_4,                      3)
-	TAGKEYS(                        XK_5,                      4)
-	TAGKEYS(                        XK_6,                      5)
-	TAGKEYS(                        XK_7,                      6)
-	TAGKEYS(                        XK_8,                      7)
-	TAGKEYS(                        XK_9,                      8)
+	TAGKEYS(upper                   XK_a,                      0),
+	TAGKEYS(upper                   XK_s,                      1),
+	TAGKEYS(upper                   XK_d,                      2),
+	TAGKEYS(upper                   XK_f,                      3),
+	{ MODKEY,                       XK_g,      upperview,      {.ui = ~0 } },
+	{ MODKEY|ShiftMask,             XK_g,      uppertag,       {.ui = ~0 } },
+	TAGKEYS(lower                   XK_z,                      0),
+	TAGKEYS(lower                   XK_x,                      1),
+	TAGKEYS(lower                   XK_c,                      2),
+	TAGKEYS(lower                   XK_v,                      3),
+	{ MODKEY,                       XK_g,      lowerview,      {.ui = ~0 } },
+	{ MODKEY|ShiftMask,             XK_g,      lowertag,       {.ui = ~0 } },
 };
 
 /* button definitions */
 /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
 static const Button buttons[] = {
-	/* click                event mask      button          function        argument */
-	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
-	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
-	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
-	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
-	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
-	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
-	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
-	{ ClkTagBar,            0,              Button1,        view,           {0} },
-	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
-	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
-	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+	/* click                event mask      button          function         argument */
+	{ ClkLtSymbol,          0,              Button1,        setlayout,       {0} },
+	{ ClkLtSymbol,          0,              Button3,        setlayout,       {.v = &layouts[2]} },
+	{ ClkWinTitle,          0,              Button2,        zoom,            {0} },
+	{ ClkStatusText,        0,              Button2,        spawn,           {.v = termcmd } },
+	{ ClkClientWin,         MODKEY,         Button1,        movemouse,       {0} },
+	{ ClkClientWin,         MODKEY,         Button2,        togglefloating,  {0} },
+	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,     {0} },
+	{ ClkTagBar,            0,              Button1,        upperview,       {0} },
+	{ ClkTagBar,            0,              Button3,        uppertoggleview, {0} },
+	{ ClkTagBar,            MODKEY,         Button1,        uppertag,        {0} },
+	{ ClkTagBar,            MODKEY,         Button3,        uppertoggletag,  {0} },
 };
-
diff --git a/dwm.c b/dwm.c
index 86c0059..0371560 100644
--- a/dwm.c
+++ b/dwm.c
@@ -49,12 +49,17 @@
 #define CLEANMASK(mask)         (mask & ~(numlockmask|LockMask) & (ShiftMask|ControlMask|Mod1Mask|Mod2Mask|Mod3Mask|Mod4Mask|Mod5Mask))
 #define INTERSECT(x,y,w,h,m)    (MAX(0, MIN((x)+(w),(m)->wx+(m)->ww) - MAX((x),(m)->wx)) \
                                * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
-#define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
+
+#define UPPERISVISIBLE(C)       ((C->uppertags & C->mon->uppertagset[C->mon->upperseltags]))
+#define LOWERISVISIBLE(C)       ((C->lowertags & C->mon->lowertagset[C->mon->lowerseltags]))
+#define ISVISIBLE(C)            (UPPERISVISIBLE(C) && LOWERISVISIBLE(C))
+
 #define LENGTH(X)               (sizeof X / sizeof X[0])
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
-#define TAGMASK                 ((1 << LENGTH(tags)) - 1)
+#define UPPERTAGMASK                 ((1 << LENGTH(uppertags)) - 1)
+#define LOWERTAGMASK                 ((1 << LENGTH(lowertags)) - 1)
 #define TEXTW(X)                (drw_fontset_getwidth(drw, (X)) + lrpad)
 
 /* enums */
@@ -91,7 +96,8 @@ struct Client {
 	int oldx, oldy, oldw, oldh;
 	int basew, baseh, incw, inch, maxw, maxh, minw, minh, hintsvalid;
 	int bw, oldbw;
-	unsigned int tags;
+	unsigned int uppertags;
+	unsigned int lowertags;
 	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
 	Client *next;
 	Client *snext;
@@ -119,9 +125,11 @@ struct Monitor {
 	int by;               /* bar geometry */
 	int mx, my, mw, mh;   /* screen size */
 	int wx, wy, ww, wh;   /* window area  */
-	unsigned int seltags;
+	unsigned int upperseltags;
+	unsigned int lowerseltags;
 	unsigned int sellt;
-	unsigned int tagset[2];
+	unsigned int uppertagset[2];
+	unsigned int lowertagset[2];
 	int showbar;
 	int topbar;
 	Client *clients;
@@ -132,15 +140,6 @@ struct Monitor {
 	const Layout *lt[2];
 };
 
-typedef struct {
-	const char *class;
-	const char *instance;
-	const char *title;
-	unsigned int tags;
-	int isfloating;
-	int monitor;
-} Rule;
-
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
@@ -206,13 +205,16 @@ static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
 static void sigchld(int unused);
 static void spawn(const Arg *arg);
-static void tag(const Arg *arg);
+static void uppertag(const Arg *arg);
+static void lowertag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *m);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
-static void toggletag(const Arg *arg);
-static void toggleview(const Arg *arg);
+static void uppertoggletag(const Arg *arg);
+static void lowertoggletag(const Arg *arg);
+static void uppertoggleview(const Arg *arg);
+static void lowertoggleview(const Arg *arg);
 static void unfocus(Client *c, int setfocus);
 static void unmanage(Client *c, int destroyed);
 static void unmapnotify(XEvent *e);
@@ -226,7 +228,8 @@ static void updatestatus(void);
 static void updatetitle(Client *c);
 static void updatewindowtype(Client *c);
 static void updatewmhints(Client *c);
-static void view(const Arg *arg);
+static void upperview(const Arg *arg);
+static void lowerview(const Arg *arg);
 static Client *wintoclient(Window w);
 static Monitor *wintomon(Window w);
 static int xerror(Display *dpy, XErrorEvent *ee);
@@ -235,8 +238,10 @@ static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
 
 static void keyrelease(XEvent *e);
-static void combotag(const Arg *arg);
-static void comboview(const Arg *arg);
+static void uppercombotag(const Arg *arg);
+static void lowercombotag(const Arg *arg);
+static void uppercomboview(const Arg *arg);
+static void lowercomboview(const Arg *arg);
 
 
 /* variables */
@@ -279,7 +284,8 @@ static Window root, wmcheckwin;
 #include "config.h"
 
 /* compile-time check if all tags fit into an unsigned int bit array. */
-struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
+struct NumUpperTags { char limitexceeded[LENGTH(uppertags) > 31 ? -1 : 1]; };
+struct NumLowerTags { char limitexceeded[LENGTH(lowertags) > 31 ? -1 : 1]; };
 
 /* function implementations */
 static int combo = 0;
@@ -290,13 +296,27 @@ keyrelease(XEvent *e) {
 }
 
 void
-combotag(const Arg *arg) {
-	if(selmon->sel && arg->ui & TAGMASK) {
+uppercombotag(const Arg *arg) {
+	if(selmon->sel && arg->ui & UPPERTAGMASK) {
+		if (combo) {
+			selmon->sel->uppertags |= arg->ui & UPPERTAGMASK;
+		} else {
+			combo = 1;
+			selmon->sel->uppertags = arg->ui & UPPERTAGMASK;
+		}
+		focus(NULL);
+		arrange(selmon);
+	}
+}
+
+void
+lowercombotag(const Arg *arg) {
+	if(selmon->sel && arg->ui & LOWERTAGMASK) {
 		if (combo) {
-			selmon->sel->tags |= arg->ui & TAGMASK;
+			selmon->sel->lowertags |= arg->ui & LOWERTAGMASK;
 		} else {
 			combo = 1;
-			selmon->sel->tags = arg->ui & TAGMASK;
+			selmon->sel->lowertags = arg->ui & LOWERTAGMASK;
 		}
 		focus(NULL);
 		arrange(selmon);
@@ -304,15 +324,30 @@ combotag(const Arg *arg) {
 }
 
 void
-comboview(const Arg *arg) {
-	unsigned newtags = arg->ui & TAGMASK;
+uppercomboview(const Arg *arg) {
+	unsigned newtags = arg->ui & UPPERTAGMASK;
 	if (combo) {
-		selmon->tagset[selmon->seltags] |= newtags;
+		selmon->uppertagset[selmon->upperseltags] |= newtags;
 	} else {
-		selmon->seltags ^= 1;	/*toggle tagset*/
+		selmon->upperseltags ^= 1;	/*toggle tagset*/
 		combo = 1;
 		if (newtags)
-			selmon->tagset[selmon->seltags] = newtags;
+			selmon->uppertagset[selmon->upperseltags] = newtags;
+	}
+	focus(NULL);
+	arrange(selmon);
+}
+
+void
+lowercomboview(const Arg *arg) {
+	unsigned newtags = arg->ui & LOWERTAGMASK;
+	if (combo) {
+		selmon->lowertagset[selmon->lowerseltags] |= newtags;
+	} else {
+		selmon->lowerseltags ^= 1;	/*toggle tagset*/
+		combo = 1;
+		if (newtags)
+			selmon->lowertagset[selmon->lowerseltags] = newtags;
 	}
 	focus(NULL);
 	arrange(selmon);
@@ -321,7 +356,13 @@ comboview(const Arg *arg) {
 void
 applyrules(Client *c)
 {
-	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
+	c->uppertags = c->uppertags & UPPERTAGMASK ?
+	    c->uppertags & UPPERTAGMASK :
+	    c->mon->uppertagset[c->mon->upperseltags];
+
+	c->lowertags = c->lowertags & LOWERTAGMASK ?
+	    c->lowertags & LOWERTAGMASK :
+	    c->mon->lowertagset[c->mon->lowerseltags];
 }
 
 int
@@ -447,9 +488,9 @@ buttonpress(XEvent *e)
 	if (ev->window == selmon->barwin) {
 		i = x = 0;
 		do
-			x += TEXTW(tags[i]);
-		while (ev->x >= x && ++i < LENGTH(tags));
-		if (i < LENGTH(tags)) {
+			x += TEXTW(uppertags[i]);
+		while (ev->x >= x && ++i < LENGTH(uppertags));
+		if (i < LENGTH(uppertags)) {
 			click = ClkTagBar;
 			arg.ui = 1 << i;
 		} else if (ev->x < x + TEXTW(selmon->ltsymbol))
@@ -489,7 +530,7 @@ cleanup(void)
 	Monitor *m;
 	size_t i;
 
-	view(&a);
+	upperview(&a);
 	selmon->lt[selmon->sellt] = &foo;
 	for (m = mons; m; m = m->next)
 		while (m->stack)
@@ -645,7 +686,8 @@ createmon(void)
 	Monitor *m;
 
 	m = ecalloc(1, sizeof(Monitor));
-	m->tagset[0] = m->tagset[1] = 1;
+	m->uppertagset[0] = m->uppertagset[1] = 1;
+	m->lowertagset[0] = m->lowertagset[1] = 1;
 	m->mfact = mfact;
 	m->nmaster = nmaster;
 	m->showbar = showbar;
@@ -724,18 +766,21 @@ drawbar(Monitor *m)
 	}
 
 	for (c = m->clients; c; c = c->next) {
-		occ |= c->tags;
-		if (c->isurgent)
-			urg |= c->tags;
+		if (c->lowertags & m->lowertagset[m->lowerseltags]) {
+			occ |= c->uppertags;
+
+			if (c->isurgent)
+    			urg |= c->uppertags;
+    	}
 	}
 	x = 0;
-	for (i = 0; i < LENGTH(tags); i++) {
-		w = TEXTW(tags[i]);
-		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
+	for (i = 0; i < LENGTH(uppertags); i++) {
+		w = TEXTW(uppertags[i]);
+		drw_setscheme(drw, scheme[m->uppertagset[m->upperseltags] & 1 << i ? SchemeSel : SchemeNorm]);
+		drw_text(drw, x, 0, w, bh, lrpad / 2, uppertags[i], urg & 1 << i);
 		if (occ & 1 << i)
 			drw_rect(drw, x + boxs, boxs, boxw, boxw,
-				m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
+				m == selmon && selmon->sel && selmon->sel->uppertags & 1 << i,
 				urg & 1 << i);
 		x += w;
 	}
@@ -1046,7 +1091,8 @@ manage(Window w, XWindowAttributes *wa)
 	updatetitle(c);
 	if (XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
 		c->mon = t->mon;
-		c->tags = t->tags;
+		c->uppertags = t->uppertags;
+		c->lowertags = t->lowertags;
 	} else {
 		c->mon = selmon;
 		applyrules(c);
@@ -1415,7 +1461,8 @@ sendmon(Client *c, Monitor *m)
 	detach(c);
 	detachstack(c);
 	c->mon = m;
-	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
+	c->uppertags = m->uppertagset[m->upperseltags]; /* assign uppertags of target monitor */
+	c->lowertags = m->lowertagset[m->lowerseltags]; /* assign lowertags of target monitor */
 	attach(c);
 	attachstack(c);
 	focus(NULL);
@@ -1633,10 +1680,20 @@ spawn(const Arg *arg)
 }
 
 void
-tag(const Arg *arg)
+uppertag(const Arg *arg)
+{
+	if (selmon->sel && arg->ui & UPPERTAGMASK) {
+		selmon->sel->uppertags = arg->ui & UPPERTAGMASK;
+		focus(NULL);
+		arrange(selmon);
+	}
+}
+
+void
+lowertag(const Arg *arg)
 {
-	if (selmon->sel && arg->ui & TAGMASK) {
-		selmon->sel->tags = arg->ui & TAGMASK;
+	if (selmon->sel && arg->ui & LOWERTAGMASK) {
+		selmon->sel->lowertags = arg->ui & LOWERTAGMASK;
 		focus(NULL);
 		arrange(selmon);
 	}
@@ -1700,27 +1757,54 @@ togglefloating(const Arg *arg)
 }
 
 void
-toggletag(const Arg *arg)
+uppertoggletag(const Arg *arg)
+{
+	unsigned int newtags;
+
+	if (!selmon->sel)
+		return;
+	newtags = selmon->sel->uppertags ^ (arg->ui & UPPERTAGMASK);
+	if (newtags) {
+		selmon->sel->uppertags = newtags;
+		focus(NULL);
+		arrange(selmon);
+	}
+}
+
+void
+lowertoggletag(const Arg *arg)
 {
 	unsigned int newtags;
 
 	if (!selmon->sel)
 		return;
-	newtags = selmon->sel->tags ^ (arg->ui & TAGMASK);
+	newtags = selmon->sel->lowertags ^ (arg->ui & LOWERTAGMASK);
 	if (newtags) {
-		selmon->sel->tags = newtags;
+		selmon->sel->lowertags = newtags;
 		focus(NULL);
 		arrange(selmon);
 	}
 }
 
 void
-toggleview(const Arg *arg)
+uppertoggleview(const Arg *arg)
 {
-	unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
+	unsigned int newtagset = selmon->uppertagset[selmon->upperseltags] ^ (arg->ui & UPPERTAGMASK);
 
 	if (newtagset) {
-		selmon->tagset[selmon->seltags] = newtagset;
+		selmon->uppertagset[selmon->upperseltags] = newtagset;
+		focus(NULL);
+		arrange(selmon);
+	}
+}
+
+void
+lowertoggleview(const Arg *arg)
+{
+	unsigned int newtagset = selmon->lowertagset[selmon->lowerseltags] ^ (arg->ui & LOWERTAGMASK);
+
+	if (newtagset) {
+		selmon->lowertagset[selmon->lowerseltags] = newtagset;
 		focus(NULL);
 		arrange(selmon);
 	}
@@ -2015,13 +2099,25 @@ updatewmhints(Client *c)
 }
 
 void
-view(const Arg *arg)
+upperview(const Arg *arg)
+{
+	if ((arg->ui & UPPERTAGMASK) == selmon->uppertagset[selmon->upperseltags])
+		return;
+	selmon->upperseltags ^= 1; /* toggle sel uppertagset */
+	if (arg->ui & UPPERTAGMASK)
+		selmon->uppertagset[selmon->upperseltags] = arg->ui & UPPERTAGMASK;
+	focus(NULL);
+	arrange(selmon);
+}
+
+void
+lowerview(const Arg *arg)
 {
-	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
+	if ((arg->ui & LOWERTAGMASK) == selmon->lowertagset[selmon->lowerseltags])
 		return;
-	selmon->seltags ^= 1; /* toggle sel tagset */
-	if (arg->ui & TAGMASK)
-		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
+	selmon->lowerseltags ^= 1; /* toggle sel lowertagset */
+	if (arg->ui & LOWERTAGMASK)
+		selmon->lowertagset[selmon->lowerseltags] = arg->ui & LOWERTAGMASK;
 	focus(NULL);
 	arrange(selmon);
 }
-- 
2.37.2

