diff --git a/config.def.h b/config.def.h
index 1c0b587..439551c 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,25 +1,25 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
-static const unsigned int snap      = 32;       /* snap pixel */
+static const unsigned int borderpx  = 2;        /* border pixel of windows */
+static const unsigned int snap      = 16;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const char *fonts[]          = { "Siji:size=9", "Hack:size=9" };
+static const char dmenufont[]       = "Siji:size=10";
 static const char col_gray1[]       = "#222222";
 static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
 static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
+static const char col_active[]      = "#ad1b3d";
 static const char *colors[][3]      = {
     /*               fg         bg         border   */
     [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+    [SchemeSel]  = { col_gray4, col_active,  col_active  },
 };
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const char *tags[] = { "\ue17e", "\ue17f", "\ue180", "\ue181", "\ue182", "\ue183", "\ue184", "\ue185", "\ue186" };
 
 static const Rule rules[] = {
     /* xprop(1):
@@ -27,7 +27,6 @@ static const Rule rules[] = {
      *  WM_NAME(STRING) = title
      */
     /* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
     { "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
 };
 
@@ -38,17 +37,17 @@ static const int resizehints = 1;    /* 1 means respect size hints in tiled resi
 
 static const Layout layouts[] = {
     /* symbol     arrange function */
-	{ "[]=",      tile },    /* first entry is default */
-	{ "><>",      NULL },    /* no layout function means floating behavior */
-	{ "[M]",      monocle },
+    { "\ue009",      tile },    /* first entry is default */
+    { "\ue024",      NULL },    /* no layout function means floating behavior */
+    { "\ue001",      monocle },
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
-	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
+    { MODKEY,                       KEY,      comboview,           {.ui = 1 << TAG} }, \
     { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
-	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
+    { MODKEY|ShiftMask,             KEY,      combotag,            {.ui = 1 << TAG} }, \
     { MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
 
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
@@ -56,7 +55,7 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_active, "-sf", col_gray4, NULL };
 static const char *termcmd[]  = { "st", NULL };
 
 static Key keys[] = {
@@ -78,8 +77,8 @@ static Key keys[] = {
     { MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
     { MODKEY,                       XK_space,  setlayout,      {0} },
     { MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
-	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
+    { MODKEY,                       XK_0,      comboview,      {.ui = ~0 } },
+    { MODKEY|ShiftMask,             XK_0,      combotag,       {.ui = ~0 } },
     { MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
     { MODKEY,                       XK_period, focusmon,       {.i = +1 } },
     { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
@@ -113,3 +112,6 @@ static Button buttons[] = {
     { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
 };
 
+/* quitting */
+static const int EMPTY_WINDOW_COUNT = 2;
+static const int BAR_TPAD = 10;
diff --git a/dwm.c b/dwm.c
index 4465af1..94839ee 100644
--- a/dwm.c
+++ b/dwm.c
@@ -234,6 +234,11 @@ static int xerrordummy(Display *dpy, XErrorEvent *ee);
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
 
+static void keyrelease(XEvent *e);
+static void combotag(const Arg *arg);
+static void comboview(const Arg *arg);
+
+
 /* variables */
 static const char broken[] = "broken";
 static char stext[256];
@@ -245,6 +250,7 @@ static int (*xerrorxlib)(Display *, XErrorEvent *);
 static unsigned int numlockmask = 0;
 static void (*handler[LASTEvent]) (XEvent *) = {
     [ButtonPress] = buttonpress,
+    [ButtonRelease] = keyrelease,
     [ClientMessage] = clientmessage,
     [ConfigureRequest] = configurerequest,
     [ConfigureNotify] = configurenotify,
@@ -252,6 +258,7 @@ static void (*handler[LASTEvent]) (XEvent *) = {
     [EnterNotify] = enternotify,
     [Expose] = expose,
     [FocusIn] = focusin,
+    [KeyRelease] = keyrelease,
     [KeyPress] = keypress,
     [MappingNotify] = mappingnotify,
     [MapRequest] = maprequest,
@@ -275,6 +282,42 @@ static Window root, wmcheckwin;
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
 /* function implementations */
+static int combo = 0;
+
+void
+keyrelease(XEvent *e) {
+    combo = 0;
+}
+
+void
+combotag(const Arg *arg) {
+    if(selmon->sel && arg->ui & TAGMASK) {
+        if (combo) {
+            selmon->sel->tags |= arg->ui & TAGMASK;
+        } else {
+            combo = 1;
+            selmon->sel->tags = arg->ui & TAGMASK;
+        }
+        focus(NULL);
+        arrange(selmon);
+    }
+}
+
+void
+comboview(const Arg *arg) {
+    unsigned newtags = arg->ui & TAGMASK;
+    if (combo) {
+        selmon->tagset[selmon->seltags] |= newtags;
+    } else {
+        selmon->seltags ^= 1;   /*toggle tagset*/
+        combo = 1;
+        if (newtags)
+            selmon->tagset[selmon->seltags] = newtags;
+    }
+    focus(NULL);
+    arrange(selmon);
+}
+
 void
 applyrules(Client *c)
 {
@@ -308,7 +351,9 @@ applyrules(Client *c)
         XFree(ch.res_class);
     if (ch.res_name)
         XFree(ch.res_name);
-	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
+    if(c->tags & TAGMASK)                    c->tags = c->tags & TAGMASK;
+    else if(c->mon->tagset[c->mon->seltags]) c->tags = c->mon->tagset[c->mon->seltags];
+    else                                     c->tags = 1;
 }
 
 int
@@ -633,7 +678,7 @@ createmon(void)
     Monitor *m;
 
     m = ecalloc(1, sizeof(Monitor));
-	m->tagset[0] = m->tagset[1] = 1;
+    m->tagset[0] = m->tagset[1] = 0;
     m->mfact = mfact;
     m->nmaster = nmaster;
     m->showbar = showbar;
@@ -719,9 +764,10 @@ drawbar(Monitor *m)
         drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
         drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
         if (occ & 1 << i)
-			drw_rect(drw, x + boxs, boxs, boxw, boxw,
+            drw_rect(drw, x + boxw, 0, w - ( 2 * boxw + 1), boxw,
                 m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
                 urg & 1 << i);
+
         x += w;
     }
     w = blw = TEXTW(m->ltsymbol);
@@ -1248,7 +1294,17 @@ propertynotify(XEvent *e)
 void
 quit(const Arg *arg)
 {
+    unsigned int n;
+    Window *junk = malloc(1);
+
+    XQueryTree(dpy, root, junk, junk, &junk, &n);
+
+    if (n == EMPTY_WINDOW_COUNT)
         running = 0;
+    else
+        printf("[dwm] not exiting (n=%d)\n", n);
+
+    free(junk);
 }
 
 Monitor *
@@ -1416,7 +1472,7 @@ sendmon(Client *c, Monitor *m)
     detach(c);
     detachstack(c);
     c->mon = m;
-	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
+    c->tags = (m->tagset[m->seltags] ? m->tagset[m->seltags] : 1);
     attach(c);
     attachstack(c);
     focus(NULL);
@@ -1545,7 +1601,7 @@ setup(void)
     if (!drw_fontset_create(drw, fonts, LENGTH(fonts)))
         die("no fonts could be loaded.");
     lrpad = drw->fonts->h;
-	bh = drw->fonts->h + 2;
+    bh = drw->fonts->h + BAR_TPAD;
     updategeom();
     /* init atoms */
     utf8string = XInternAtom(dpy, "UTF8_STRING", False);
@@ -1727,12 +1783,10 @@ toggletag(const Arg *arg)
     if (!selmon->sel)
         return;
     newtags = selmon->sel->tags ^ (arg->ui & TAGMASK);
-	if (newtags) {
-		selmon->sel->tags = newtags;
+    selmon->tagset[selmon->seltags] = newtags;
     focus(NULL);
     arrange(selmon);
 }
-}
 
 void
 toggleview(const Arg *arg)
@@ -2035,7 +2089,7 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
-	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
+    if(arg->ui && (arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
         return;
     selmon->seltags ^= 1; /* toggle sel tagset */
     if (arg->ui & TAGMASK)
